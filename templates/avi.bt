//------------------------------------------------
//--- 010 Editor v1.2 Binary Template
//
//      File: AVI.bt
//   Authors: Blaine Lefebvre [bl], Elias Bachaalany [eb]
//   Version: 1.2
//   Purpose: Parse an AVI movie file.
//  Category: Video
// File Mask: *.avi
//  ID Bytes: 52 49 46 46 [+4] 41 56 49 20 //RIFF????AVI 
//   History: 
//   1.2   2016-01-27 SweetScape: Updated header for repository submission, added coloring for header.
//   1.1   2006-10-02 eb: Added BITMAPINFO and WAVEFORMATEX proper strfHEADER recognition,
//                      Fixed 'idx1' parsing.
//   1.0   bl: Initial release.
//------------------------------------------------

GlobalIndexingOfArrays();

local uint junk_index = 0;
local uint list_index = 0;
local uint frame_index = 0;
local uint allow_vprp = 1;

typedef struct
{ 
  WORD  wFormatTag; 
  WORD  nChannels; 
  DWORD nSamplesPerSec; 
  DWORD nAvgBytesPerSec; 
  WORD  nBlockAlign; 
  WORD  wBitsPerSample; 
  WORD  cbSize; 
} WAVEFORMATEX; 

// head structure info
typedef struct 
{
    DWORD  dwMicroSecPerFrame;
    DWORD  dwMaxBytesPerSec;
    DWORD  dwReserved1;
    DWORD  dwFlags;
    DWORD  dwTotalFrames;
    DWORD  dwInitialFrames;
    DWORD  dwStreams;
    DWORD  dwSuggestedBufferSize;
    DWORD  dwWidth;
    DWORD  dwHeight;
    DWORD  dwScale;
    DWORD  dwRate;
    DWORD  dwStart;
    DWORD  dwLength;
} MainAVIHeader;

typedef struct
{
  uint32 biSize;
  uint32 biWidth;
  uint32 biHeight;
  uint16 biPlanes;
  uint16 biBitCount = {8};
  uint32 biCompression = {1};
  uint32 biSizeImage;
  uint32 biXPelsPerMeter;
  uint32 biYPelsPerMeter;
  uint32 biClrUsed;
  uint32 biClrImportant;
} BITMAPINFOHEADER;

typedef struct 
{
  unsigned char rgbBlue;
  unsigned char rgbGreen;
  unsigned char rgbRed;
  unsigned char rgbReserved;
} RGBQUAD;

typedef struct 
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors;
} BITMAPINFO;

typedef struct 
{
  char id[4] = { "avih" };
  uint32 avi_hdr_datalen = { 56 }; //len(MainAVIHeader)
  MainAVIHeader data;
} avihHEADER;


// header stream structure info
typedef struct 
{
    local string type_preferred[] = { "vids" };
    local string type_possible[] = { "vids", "auds" };

    local char type_value[4];
    ReadBytes(type_value, FTell(), 4, type_preferred, type_possible, 0.90);

    char   fccType[4];
    char   fccHandler[4];
    DWORD  dwFlags;
    DWORD  dwReserved1;
    DWORD  dwInitialFrames;
    DWORD  dwScale;
    DWORD  dwRate;
    DWORD  dwStart;
    DWORD  dwLength;
    DWORD  dwSuggestedBufferSize;
    DWORD  dwQuality;
    DWORD  dwSampleSize;
    DWORD  xdwQuality;
    DWORD  xdwSampleSize;
} AVIStreamHeader;

typedef struct 
{
  char id[4] = { "strh" };
  uint32  strh_hdr_datalen = {56}; //len(AVIStreamHeader)
  AVIStreamHeader data;
}strhHEADER;


// Generic strfHEADER
typedef struct 
{
  char id[4] = { "strf" };
  uint32  strf_hdr_datalen<arraylength=true>;
  if (strf_hdr_datalen % 2)
	  char data[strf_hdr_datalen+1];
  else
	  char data[strf_hdr_datalen];
} strfHEADER;

// strfHEADER with BITMAPINFOHEADER
typedef struct 
{
  char id[4] = { "strf" };
  uint32  strf_hdr_bih_datalen<min = 40, max = 58>;
  BITMAPINFOHEADER bmiHeader;
  local int sz = sizeof(bmiHeader); //This is 40
  if (strf_hdr_bih_datalen == 44)
  {
    RGBQUAD bmiColors;
    sz += 4;
  }
  Printf("left: %d\n", sz);
  local uint exDataLen = strf_hdr_bih_datalen - sz;
  char exData[exDataLen];
} strfHEADER_BIH;


// strfHEADER with WAVEFORMAT
typedef struct 
{
  char id[4] = { "strf" };
  uint32  strf_hdr_wave_datalen<min = 20, max = 36>;
  WAVEFORMATEX wave;
  char exData[strf_hdr_wave_datalen - 18];
} strfHEADER_WAVE;

//
typedef struct 
{
  char id[4] = { "vedt" };
  uint32  strn_hdr_datalen<arraylength=true>;
  if ( strn_hdr_datalen % 2 )
    char data[strn_hdr_datalen+1];
  else
    char data[strn_hdr_datalen];
} strnHEADER;

//
typedef struct 
{
  char id[4];
  uint32  genblk_datalen<arraylength=true>;
  if ( genblk_datalen % 2 )
    char data[genblk_datalen+1];
  else
    char data[genblk_datalen];
} genericblock;

typedef struct 
{
  char id[4];
  uint32  movi_datalen<arraylength=true>;
  if ( movi_datalen % 2 )
    char data[movi_datalen+1];
  else
    char data[movi_datalen];
} MOVICHUNK;


typedef struct 
{
  char id[4];
  uint32  junk_hdr_datalen<arraylength=true>;
  if ( junk_hdr_datalen % 2 )
    char data[junk_hdr_datalen+1];
  else
    char data[junk_hdr_datalen];
} JUNKHEADER;

struct LISTHEADER;

typedef struct
{
  char id[4];

  local uint datalen_pos = FTell();
  uint32 list_datalen<min = 6, max = 22>;

  char type[4] = { (list_index == 0 ? "hdrl" : (list_index == 1 ? "strl" : "movi")) };

  if (!Memcmp(type,"hdrl",4))
  {
    avihHEADER avhi;
  }
  else if (!Memcmp(type,"strl",4))
  {
    strhHEADER strh;

    // Printf("->%c%c%c%c\n", strh.data.fccHandler[0], strh.data.fccHandler[1],strh.data.fccHandler[2],strh.data.fccHandler[3]);
    if (Memcmp(strh.data.fccType, "vids", 4) == 0)
    {
      strfHEADER_BIH strf;
    }
    else if (Memcmp(strh.data.fccType, "auds", 4) == 0)
    {
      strfHEADER_WAVE strf;
    }
    else
    {
      strfHEADER strf;
    }

    local char next_hdr[4];
    ReadBytes(next_hdr, FTell(), 4);
    if (next_hdr != "LIST" && next_hdr != "vprp" &&
        next_hdr != "idx1" && next_hdr != "JUNK") {
      strnHEADER strn;
    }

  }
  else if (Memcmp(type,"movi",4) == 0 || Memcmp(type,"rec ",4) == 0)
  {
    local int32 pointer = 0;
    local int32 stop = list_datalen - 4;
    
    //Printf("stop=%d\n", stop);

    do
    {

      local uint movi_blk_start = FTell();
      local char movi_blk_hdr[4];
      local string movi_blk_hdr_preferred[] = { "00db" };
      local string movi_blk_hdr_possible[] = { "00db", "00dc", "00pc", "00wb" }; //00dc 00wb
      ReadBytes(movi_blk_hdr, FTell(), 4);//, movi_blk_hdr_preferred, movi_blk_hdr_possible);
      
      if (movi_blk_hdr == "JUNK") {
        JUNKHEADER junk;
      }
      else {
        struct {
          if (movi_blk_hdr == "LIST") {
            LISTHEADER movi_list;
          } else {
            MOVICHUNK movi_chunk;
          }
        } frame;
        frame_index++;
      }
      
      pointer += (FTell() - movi_blk_start);

    } while (pointer < stop);
    
    local uint after_pos = FTell();
    FSeek(datalen_pos);
    local uint evil_state = SetEvilBit(false);
    uint32 list_datalen = { (uint32)pointer + 4 };
    SetEvilBit(evil_state);
    FSeek(after_pos);

  }
  else
  {
    char data[list_datalen-4];
  }
} LISTHEADER;

typedef enum <DWORD> {
  FORMAT_UNKNOWN,
  FORMAT_PAL_SQUARE,
  FORMAT_PAL_CCTR_601,
  FORMAT_NTSC_SQUARE,
  FORMAT_NTSC_CCTR_601
} VIDEO_FORMAT;

typedef enum <DWORD> {
  STANDARD_UNKNOWN,
  STANDARD_PAL,
  STANDARD_NTSC,
  STANDARD_SECAM
} VIDEO_STANDARD;

typedef struct {
  DWORD CompressedBMHeight;
  DWORD CompressedBMWidth;
  DWORD ValidBMHeight;
  DWORD ValidBMWidth;
  DWORD ValidBMXOffset;
  DWORD ValidBMYOffset;
  DWORD VideoXOffsetInT;
  DWORD VideoYValidStartLine;
} VIDEO_FIELD_DESC;

typedef struct {

  char id[4];
  uint32 vprp_datalen;

  local uint vprp_start = FTell();
  VIDEO_FORMAT VideoFormatToken;
  VIDEO_STANDARD VideoStandard;
  DWORD dwVerticalRefreshRate;
  DWORD dwHTotalInT;
  DWORD dwVTotalInLines;
  DWORD dwFrameAspectRatio;
  DWORD dwFrameWidthInPixels;
  DWORD dwFrameHeightInLines;
  DWORD nbFieldPerFrame = { 0x01, 0x02 };
  VIDEO_FIELD_DESC FieldInfo[nbFieldPerFrame];
  local uint vprp_end = FTell();

  FSeek(vprp_start - 4);
  local uint evil_state = SetEvilBit(false);
  uint32 vprp_datalen = {vprp_end - vprp_start};
  SetEvilBit(evil_state);
  FSeek(vprp_end);

} VideoPropHeader;

// aviindex structure info
typedef struct (string _type, DWORD _flags, DWORD _offset, DWORD _length)
{
    char   ckid[4] = { _type };
    DWORD  dwFlags;// = { _flags };
    DWORD  dwChunkOffset = { _offset };
    DWORD  dwChunkLength = { _length };
} AVIINDEXENTRY;

typedef struct 
{
  char id[4];
  uint32 idx1_datalen;
  local uint index_start = FTell();

  local uint i;
  local uint offset = 4;
  for (i = 0; i < frame_index; i++) {
    if (exists(frame[i].movi_chunk)) {
      AVIINDEXENTRY index_entry(
        frame[i].movi_chunk.id,
        0x00000000, offset, 
        frame[i].movi_chunk.movi_datalen
      );
      offset += 8 + frame[i].movi_chunk.movi_datalen;
    } else {
      AVIINDEXENTRY index_entry(
        frame[i].movi_list.type,
        0x00000000, offset,
        frame[i].movi_list.list_datalen
      );
      offset += 12;
    }
  }

  local uint index_end = FTell();
  FSeek(index_start - 4);
  local uint evil_state = SetEvilBit(false);
  uint32 idx1_hdr_datalen = { index_end - index_start };
  SetEvilBit(evil_state);
  FSeek(index_end);

} idx1HEADER;

// root structure info
typedef struct xroot 
{
  char id[4] = { "RIFF" }; // RIFF
  if (root.id[3] == 'X')
  {
    Printf("Motorola format\n");
    BigEndian();
  }
  else
  {
    Printf("Intel format\n");
    LittleEndian();
  }

  local uint root_datalen_pos = FTell();
  uint32  root_datalen<arraylength=true>;

  local uint evil_state = SetEvilBit(false);
  char form[4] = { "AVI " };
  SetEvilBit(evil_state);

  if (Strcmp(form, "AVI "))
  {
    Warning("Not a valid AVI file");
    return -1;
  }
} ROOT <bgcolor=cLtGray>;

ROOT root;

local string nheader_preferred[] = { "LIST", "JUNK" };
local string nheader_possible[] = { "LIST", "JUNK" };

local char nheader[4];

while (ReadBytes(nheader, FTell(), 4, nheader_preferred, nheader_possible))
{
  switch (nheader) {
    case "LIST":
      LISTHEADER list;
      list_index++;
      if (list_index == 1 && allow_vprp) {
        nheader_preferred += "vprp";
        nheader_possible += "vprp";
      }
      else if (list_index >= 3) {
        local string nheader_preferred[] = { "idx1" };
        local string nheader_possible[] = { "idx1" };
      }
      break;
    case "JUNK":
      JUNKHEADER junk;
      junk_index++;
      if (junk_index >= 2) {
        nheader_preferred -= "JUNK";
      }
      break;
    case "idx1":
      idx1HEADER idx1;
      local string nheader_preferred[0];
      local string nheader_possible[0];
      break;
    case "vprp":
      VideoPropHeader vprp;
      nheader_preferred -= "vprp";
      nheader_possible -= "vprp";
      break;
    default:
      genericblock unknown_block;
    }
}

local uint file_end = FTell();
FSeek(root.root_datalen_pos);
local uint evil_state = SetEvilBit(false);
uint32 root_datalen = {file_end - 8};
SetEvilBit(evil_state);
FSeek(file_end);

while (!FEof()) {
  char garbage;
}
